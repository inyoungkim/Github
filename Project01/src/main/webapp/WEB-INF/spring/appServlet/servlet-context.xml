<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet로 설정된 서블릿의 요청 처리 기반을 정의합니다. -->
	
	<!-- Spring MVC 패턴의 @Controller 프로그래밍 모델을 활성화합니다.
	(쉡게 얘기하자면 어노테이션 사용이 가능하단 말인듯 합니다.) -->
	<annotation-driven />

	<!-- servlet의 url-pattern을 root(/)를 가져가는 url 패턴으로 사용한다면, 확장자에 관계없이 모든 요청에 대한 구분을
	DispatcherServlet이 통제하려고 하기 때문에
	예를 들면, css, js, img 파일 등에 대한 처리도 모두 매핑해줘야 합니다.
	그래서 그런 번거러움을 없애기 위해서 DispatcherServlet이 특정폴더를 제외한 나머지만을 통제하게끔 설정하는 것입니다.
	그러니깐 css, js, img 파일 등은 resources 폴더에 넣어 관리해줘야겠죠. -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- ViewResolver 설정입니다. jsp와 name을 매핑시켜주는 역할을 합니다. -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- com.inyoung.test 하위 모든 패키지에 있는 파일의 어노테이션을 스캔해서 빈으로 등록하겠다는 말입니다. -->
	<context:component-scan base-package="com.inyoung.test" />
	
	
	
</beans:beans>
